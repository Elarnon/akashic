module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = null,
        peg$c2 = [],
        peg$c3 = function(q) { return q; },
        peg$c4 = function(q, qs) {
        	if (!q) return { 'match_all': {} };
        	qs.push(q);
        	var filters = [], queries = [];
        	qs.forEach(function (req) {
        	    if (req[0] === 'filter') {
        		filters.push(req[1]);
        	    } else if (req[0] == 'query') {
        		queries.push(req[1])
        	    }
        	});
        	var res = {
        	};
        	if (filters.length > 0) {
        	    res['filter'] = {
        		'and': filters
        	    };
        	}
        	if (queries.length > 0) {
        	    res['query'] = {
        		'bool': {
        		    'should': queries
        		}
        	    };
        	}
        	return {
        	    'filtered': res
        	};
            },
        peg$c5 = void 0,
        peg$c6 = { type: "any", description: "any character" },
        peg$c7 = function(ft) { return [ 'filter', ft ]; },
        peg$c8 = function(qt) { return [ 'query', qt ]; },
        peg$c9 = "registre",
        peg$c10 = { type: "literal", value: "registre", description: "\"registre\"" },
        peg$c11 = "s",
        peg$c12 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c13 = ",",
        peg$c14 = { type: "literal", value: ",", description: "\",\"" },
        peg$c15 = function(r) { return r; },
        peg$c16 = function(r, regs) {
        	return {
        	    'terms': {
        		'school.descriptors': [r].concat(regs),
        		'execution': 'and',
        	    },
        	};
            },
        peg$c17 = "branche",
        peg$c18 = { type: "literal", value: "branche", description: "\"branche\"" },
        peg$c19 = "ou",
        peg$c20 = { type: "literal", value: "ou", description: "\"ou\"" },
        peg$c21 = function(s) { return s; },
        peg$c22 = function(sub, subs) {
        	return {
        	    'terms': {
        		'school.subschool': [sub].concat(subs)
        	    }
        	};
            },
        peg$c23 = "(",
        peg$c24 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c25 = ")",
        peg$c26 = { type: "literal", value: ")", description: "\")\"" },
        peg$c27 = function(sc) { return sc; },
        peg$c28 = function(s, sub) {
        	var q = {
        	    'term': { 'school.school_name': s }
        	};
        	if (sub) {
        	    q = {
        		'and': [
        		    q,
        		    { 'term': { 'school.subschool': sub } },
        		],
        	    };
        	}
        	return q;
            },
        peg$c29 = function(s) { return { 'term': { 'source': s } }; },
        peg$c30 = function(ft) { return ft; },
        peg$c31 = "\"",
        peg$c32 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c33 = /^[^"]/,
        peg$c34 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c35 = function(txt) {
        	return {
        	    'multi_match': {
        		'query': txt,
        		'fields': [ 'name', 'short_desc', 'description' ],
        		'type': 'phrase',
        	    },
        	};
            },
        peg$c36 = function(qs) { return qs; },
        peg$c37 = function(txt) {
        	return {
        	    'multi_match': {
        		'query': txt,
        		'fields': [ 'name', 'short_desc', 'description' ],
        	    }
        	};
            },
        peg$c38 = /^[ \n]/,
        peg$c39 = { type: "class", value: "[ \\n]", description: "[ \\n]" },
        peg$c40 = "magicien",
        peg$c41 = { type: "literal", value: "Magicien", description: "\"Magicien\"" },
        peg$c42 = "ensorceleur",
        peg$c43 = { type: "literal", value: "Ensorceleur", description: "\"Ensorceleur\"" },
        peg$c44 = "ensorceleur/magicien",
        peg$c45 = { type: "literal", value: "Ensorceleur/Magicien", description: "\"Ensorceleur/Magicien\"" },
        peg$c46 = function() { return "wizard"; },
        peg$c47 = "pr\xEAtre",
        peg$c48 = { type: "literal", value: "Pr\xEAtre", description: "\"Pr\\xEAtre\"" },
        peg$c49 = "pretre",
        peg$c50 = { type: "literal", value: "Pretre", description: "\"Pretre\"" },
        peg$c51 = function() { return "cleric"; },
        peg$c52 = "barde",
        peg$c53 = { type: "literal", value: "Barde", description: "\"Barde\"" },
        peg$c54 = function() { return "bard"; },
        peg$c55 = "paladin",
        peg$c56 = { type: "literal", value: "Paladin", description: "\"Paladin\"" },
        peg$c57 = function() { return "paladin"; },
        peg$c58 = "antipaladin",
        peg$c59 = { type: "literal", value: "Antipaladin", description: "\"Antipaladin\"" },
        peg$c60 = function() { return "antipaladin"; },
        peg$c61 = "r\xF4deur",
        peg$c62 = { type: "literal", value: "R\xF4deur", description: "\"R\\xF4deur\"" },
        peg$c63 = "rodeur",
        peg$c64 = { type: "literal", value: "Rodeur", description: "\"Rodeur\"" },
        peg$c65 = "ranger",
        peg$c66 = { type: "literal", value: "Ranger", description: "\"Ranger\"" },
        peg$c67 = function() { return "ranger"; },
        peg$c68 = "alchimiste",
        peg$c69 = { type: "literal", value: "Alchimiste", description: "\"Alchimiste\"" },
        peg$c70 = function() { return "alchemist"; },
        peg$c71 = "druide",
        peg$c72 = { type: "literal", value: "Druide", description: "\"Druide\"" },
        peg$c73 = function() { return "druid"; },
        peg$c74 = "magus",
        peg$c75 = { type: "literal", value: "Magus", description: "\"Magus\"" },
        peg$c76 = function() { return "magus"; },
        peg$c77 = "sorci\xE8re",
        peg$c78 = { type: "literal", value: "Sorci\xE8re", description: "\"Sorci\\xE8re\"" },
        peg$c79 = "sorciere",
        peg$c80 = { type: "literal", value: "Sorciere", description: "\"Sorciere\"" },
        peg$c81 = function() { return "witch"; },
        peg$c82 = "invocateur",
        peg$c83 = { type: "literal", value: "Invocateur", description: "\"Invocateur\"" },
        peg$c84 = "convocateur",
        peg$c85 = { type: "literal", value: "Convocateur", description: "\"Convocateur\"" },
        peg$c86 = function() { return "summoner"; },
        peg$c87 = "inquisiteur",
        peg$c88 = { type: "literal", value: "Inquisiteur", description: "\"Inquisiteur\"" },
        peg$c89 = function() { return "inquisitor"; },
        peg$c90 = "oracle",
        peg$c91 = { type: "literal", value: "Oracle", description: "\"Oracle\"" },
        peg$c92 = function() { return "oracle"; },
        peg$c93 = /^[0-9]/,
        peg$c94 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c95 = function(lvl) { return parseInt(lvl, 10); },
        peg$c96 = function(cls, levels) {
        	var classFilter = {
        	    'term': { 'level.class_name': cls }
        	};
        	if (levels.length > 0) {
        	    classFilter = {
        		'and': [
        		    classFilter,
        		    { 'terms': { 'level.class_level': levels } },
        		],
        	    };
        	}
        	return {
        	    'nested': {
        		'path': 'level',
        		'filter': classFilter,
        	    },
        	};
            },
        peg$c97 = "v",
        peg$c98 = { type: "literal", value: "V", description: "\"V\"" },
        peg$c99 = "verbal",
        peg$c100 = { type: "literal", value: "verbal", description: "\"verbal\"" },
        peg$c101 = function() {
        	return { 'term': { 'components.verbal': true } };
            },
        peg$c102 = "g",
        peg$c103 = { type: "literal", value: "G", description: "\"G\"" },
        peg$c104 = "gestuelle",
        peg$c105 = { type: "literal", value: "gestuelle", description: "\"gestuelle\"" },
        peg$c106 = function() {
        	return { 'term': { 'components.somatic': true } };
            },
        peg$c107 = "f/fd",
        peg$c108 = { type: "literal", value: "F/FD", description: "\"F/FD\"" },
        peg$c109 = function() {
        	return {
        	    'and': [
        		{ 'term': { 'components.focus': true } },
        		{ 'term': { 'components.divine_focus': true } },
        	    ]
        	};
            },
        peg$c110 = "m/fd",
        peg$c111 = { type: "literal", value: "M/FD", description: "\"M/FD\"" },
        peg$c112 = function() {
        	return {
        	    'and': [
        		{ 'term': { 'components.material': true } },
        		{ 'term': { 'components.divine_focus': true } },
        	    ]
        	};
            },
        peg$c113 = "fd",
        peg$c114 = { type: "literal", value: "FD", description: "\"FD\"" },
        peg$c115 = "focus",
        peg$c116 = { type: "literal", value: "focus", description: "\"focus\"" },
        peg$c117 = "divin",
        peg$c118 = { type: "literal", value: "divin", description: "\"divin\"" },
        peg$c119 = function() {
        	return { 'term': { 'components.divine_focus': true } };
            },
        peg$c120 = "f",
        peg$c121 = { type: "literal", value: "F", description: "\"F\"" },
        peg$c122 = function() {
        	return { 'term': { 'components.focus': true } };
            },
        peg$c123 = "m",
        peg$c124 = { type: "literal", value: "M", description: "\"M\"" },
        peg$c125 = "materielle",
        peg$c126 = { type: "literal", value: "materielle", description: "\"materielle\"" },
        peg$c127 = "mat\xE9rielle",
        peg$c128 = { type: "literal", value: "mat\xE9rielle", description: "\"mat\\xE9rielle\"" },
        peg$c129 = function() {
        	return { 'term': { 'components.material': true } };
            },
        peg$c130 = "acide",
        peg$c131 = { type: "literal", value: "acide", description: "\"acide\"" },
        peg$c132 = function() { return 'acid'; },
        peg$c133 = "air",
        peg$c134 = { type: "literal", value: "air", description: "\"air\"" },
        peg$c135 = function() { return 'air'; },
        peg$c136 = "chaos",
        peg$c137 = { type: "literal", value: "chaos", description: "\"chaos\"" },
        peg$c138 = function() { return 'chaotic'; },
        peg$c139 = "froid",
        peg$c140 = { type: "literal", value: "froid", description: "\"froid\"" },
        peg$c141 = function() { return 'cold'; },
        peg$c142 = "obscurit",
        peg$c143 = { type: "literal", value: "obscurit", description: "\"obscurit\"" },
        peg$c144 = /^[e\xE9]/i,
        peg$c145 = { type: "class", value: "[e\\xE9]i", description: "[e\\xE9]i" },
        peg$c146 = "t",
        peg$c147 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c148 = "n",
        peg$c149 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c150 = /^[e\xE8]/i,
        peg$c151 = { type: "class", value: "[e\\xE8]i", description: "[e\\xE8]i" },
        peg$c152 = "bre",
        peg$c153 = { type: "literal", value: "bre", description: "\"bre\"" },
        peg$c154 = function() { return 'darkness'; },
        peg$c155 = "mort",
        peg$c156 = { type: "literal", value: "mort", description: "\"mort\"" },
        peg$c157 = function() { return 'death'; },
        peg$c158 = "terre",
        peg$c159 = { type: "literal", value: "terre", description: "\"terre\"" },
        peg$c160 = function() { return 'earth'; },
        peg$c161 = "lectricit",
        peg$c162 = { type: "literal", value: "lectricit", description: "\"lectricit\"" },
        peg$c163 = /^[\xE9e]/i,
        peg$c164 = { type: "class", value: "[\\xE9e]i", description: "[\\xE9e]i" },
        peg$c165 = "e",
        peg$c166 = { type: "literal", value: "e", description: "\"e\"" },
        peg$c167 = function() { return 'electricity'; },
        peg$c168 = "mal",
        peg$c169 = { type: "literal", value: "mal", description: "\"mal\"" },
        peg$c170 = function() { return 'evil'; },
        peg$c171 = "peur",
        peg$c172 = { type: "literal", value: "peur", description: "\"peur\"" },
        peg$c173 = "terreur",
        peg$c174 = { type: "literal", value: "terreur", description: "\"terreur\"" },
        peg$c175 = function() { return 'fear'; },
        peg$c176 = "feu",
        peg$c177 = { type: "literal", value: "feu", description: "\"feu\"" },
        peg$c178 = function() { return 'fire'; },
        peg$c179 = "force",
        peg$c180 = { type: "literal", value: "force", description: "\"force\"" },
        peg$c181 = function() { return 'force'; },
        peg$c182 = "bien",
        peg$c183 = { type: "literal", value: "bien", description: "\"bien\"" },
        peg$c184 = function() { return 'good'; },
        peg$c185 = "langage",
        peg$c186 = { type: "literal", value: "langage", description: "\"langage\"" },
        peg$c187 = function() { return 'language-dependent'; },
        peg$c188 = "loi",
        peg$c189 = { type: "literal", value: "loi", description: "\"loi\"" },
        peg$c190 = function() { return 'lawful'; },
        peg$c191 = "lumi",
        peg$c192 = { type: "literal", value: "lumi", description: "\"lumi\"" },
        peg$c193 = "re",
        peg$c194 = { type: "literal", value: "re", description: "\"re\"" },
        peg$c195 = function() { return 'light'; },
        peg$c196 = "mental",
        peg$c197 = { type: "literal", value: "mental", description: "\"mental\"" },
        peg$c198 = function() { return 'mind-affecting'; },
        peg$c199 = "ombre",
        peg$c200 = { type: "literal", value: "ombre", description: "\"ombre\"" },
        peg$c201 = function() { return 'shadow'; },
        peg$c202 = "son",
        peg$c203 = { type: "literal", value: "son", description: "\"son\"" },
        peg$c204 = function() { return 'sonic'; },
        peg$c205 = "eau",
        peg$c206 = { type: "literal", value: "eau", description: "\"eau\"" },
        peg$c207 = function() { return 'water'; },
        peg$c208 = "diction",
        peg$c209 = { type: "literal", value: "diction", description: "\"diction\"" },
        peg$c210 = function() { return 'curse'; },
        peg$c211 = "maladie",
        peg$c212 = { type: "literal", value: "maladie", description: "\"maladie\"" },
        peg$c213 = function() { return 'disease'; },
        peg$c214 = "motion",
        peg$c215 = { type: "literal", value: "motion", description: "\"motion\"" },
        peg$c216 = function() { return 'emotion'; },
        peg$c217 = "douleur",
        peg$c218 = { type: "literal", value: "douleur", description: "\"douleur\"" },
        peg$c219 = function() { return 'pain'; },
        peg$c220 = "poison",
        peg$c221 = { type: "literal", value: "poison", description: "\"poison\"" },
        peg$c222 = function() { return 'poison'; },
        peg$c223 = "abjuration",
        peg$c224 = { type: "literal", value: "Abjuration", description: "\"Abjuration\"" },
        peg$c225 = function() { return 'abjuration'; },
        peg$c226 = "invocation",
        peg$c227 = { type: "literal", value: "Invocation", description: "\"Invocation\"" },
        peg$c228 = "conjuration",
        peg$c229 = { type: "literal", value: "Conjuration", description: "\"Conjuration\"" },
        peg$c230 = function() { return 'conjuration'; },
        peg$c231 = "divination",
        peg$c232 = { type: "literal", value: "Divination", description: "\"Divination\"" },
        peg$c233 = function() { return 'divination'; },
        peg$c234 = "enchantement",
        peg$c235 = { type: "literal", value: "Enchantement", description: "\"Enchantement\"" },
        peg$c236 = function() { return 'enchantment'; },
        peg$c237 = /^[E\xC9]/i,
        peg$c238 = { type: "class", value: "[E\\xC9]i", description: "[E\\xC9]i" },
        peg$c239 = "vocation",
        peg$c240 = { type: "literal", value: "vocation", description: "\"vocation\"" },
        peg$c241 = function() { return 'evocation'; },
        peg$c242 = "illusion",
        peg$c243 = { type: "literal", value: "Illusion", description: "\"Illusion\"" },
        peg$c244 = function() { return 'illusion'; },
        peg$c245 = { type: "literal", value: "N", description: "\"N\"" },
        peg$c246 = "cromancie",
        peg$c247 = { type: "literal", value: "cromancie", description: "\"cromancie\"" },
        peg$c248 = function() { return 'necromancy'; },
        peg$c249 = "transmutation",
        peg$c250 = { type: "literal", value: "Transmutation", description: "\"Transmutation\"" },
        peg$c251 = function() { return 'transmutation'; },
        peg$c252 = "universelle",
        peg$c253 = { type: "literal", value: "Universelle", description: "\"Universelle\"" },
        peg$c254 = function() { return 'universal'; },
        peg$c255 = "appel",
        peg$c256 = { type: "literal", value: "Appel", description: "\"Appel\"" },
        peg$c257 = function() { return 'calling'; },
        peg$c258 = "cr",
        peg$c259 = { type: "literal", value: "Cr", description: "\"Cr\"" },
        peg$c260 = "ation",
        peg$c261 = { type: "literal", value: "ation", description: "\"ation\"" },
        peg$c262 = function() { return 'creation'; },
        peg$c263 = "gu",
        peg$c264 = { type: "literal", value: "Gu", description: "\"Gu\"" },
        peg$c265 = "rison",
        peg$c266 = { type: "literal", value: "rison", description: "\"rison\"" },
        peg$c267 = function() { return 'healing'; },
        peg$c268 = "convocation",
        peg$c269 = { type: "literal", value: "Convocation", description: "\"Convocation\"" },
        peg$c270 = function() { return 'summoning'; },
        peg$c271 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c272 = "l",
        peg$c273 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c274 = "portation",
        peg$c275 = { type: "literal", value: "portation", description: "\"portation\"" },
        peg$c276 = function() { return 'teleportation'; },
        peg$c277 = "scrutation",
        peg$c278 = { type: "literal", value: "Scrutation", description: "\"Scrutation\"" },
        peg$c279 = function() { return 'scrying'; },
        peg$c280 = "charme",
        peg$c281 = { type: "literal", value: "Charme", description: "\"Charme\"" },
        peg$c282 = function() { return 'charm'; },
        peg$c283 = "coercition",
        peg$c284 = { type: "literal", value: "Coercition", description: "\"Coercition\"" },
        peg$c285 = "compulsion",
        peg$c286 = { type: "literal", value: "Compulsion", description: "\"Compulsion\"" },
        peg$c287 = function() { return 'compulsion'; },
        peg$c288 = "chim",
        peg$c289 = { type: "literal", value: "Chim", description: "\"Chim\"" },
        peg$c290 = function() { return 'figment'; },
        peg$c291 = "hallucination",
        peg$c292 = { type: "literal", value: "Hallucination", description: "\"Hallucination\"" },
        peg$c293 = function() { return 'glamer'; },
        peg$c294 = "mirage",
        peg$c295 = { type: "literal", value: "Mirage", description: "\"Mirage\"" },
        peg$c296 = function() { return 'pattern'; },
        peg$c297 = { type: "literal", value: "Ombre", description: "\"Ombre\"" },
        peg$c298 = "tamorphose",
        peg$c299 = { type: "literal", value: "tamorphose", description: "\"tamorphose\"" },
        peg$c300 = function() { return 'polymorph'; },
        peg$c301 = "CRB",
        peg$c302 = { type: "literal", value: "CRB", description: "\"CRB\"" },
        peg$c303 = "APG",
        peg$c304 = { type: "literal", value: "APG", description: "\"APG\"" },
        peg$c305 = "UC",
        peg$c306 = { type: "literal", value: "UC", description: "\"UC\"" },
        peg$c307 = "UM",
        peg$c308 = { type: "literal", value: "UM", description: "\"UM\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserequest();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsews();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsews();
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parserequest();
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c3(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsews();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsews();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserequest();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c3(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsews();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsews();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserequest() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefilter_token();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsews();
        peg$silentFails--;
        if (s3 !== peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$c5;
        } else {
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c5;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c7(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsequery_token();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parsews();
          peg$silentFails--;
          if (s3 !== peg$FAILED) {
            peg$currPos = s2;
            s2 = peg$c5;
          } else {
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c5;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsefilter_token() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$parselevel_tokens();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomponents();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c9) {
            s1 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c11) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsews();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsews();
                }
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseregister();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$currPos;
                  s7 = [];
                  s8 = peg$parsews();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsews();
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c13;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c14); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parsews();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parsews();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseregister();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s6;
                          s7 = peg$c15(s10);
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$currPos;
                    s7 = [];
                    s8 = peg$parsews();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsews();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s8 = peg$c13;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c14); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parsews();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parsews();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseregister();
                          if (s10 !== peg$FAILED) {
                            peg$reportedPos = s6;
                            s7 = peg$c15(s10);
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c16(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c17) {
              s1 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsews();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parsews();
                }
              } else {
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesubschool();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$currPos;
                  s6 = [];
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parsews();
                    }
                  } else {
                    s6 = peg$c0;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c19) {
                      s7 = peg$c19;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parsews();
                      if (s9 !== peg$FAILED) {
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parsews();
                        }
                      } else {
                        s8 = peg$c0;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsesubschool();
                        if (s9 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c21(s9);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$currPos;
                    s6 = [];
                    s7 = peg$parsews();
                    if (s7 !== peg$FAILED) {
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parsews();
                      }
                    } else {
                      s6 = peg$c0;
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c19) {
                        s7 = peg$c19;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parsews();
                        if (s9 !== peg$FAILED) {
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parsews();
                          }
                        } else {
                          s8 = peg$c0;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsesubschool();
                          if (s9 !== peg$FAILED) {
                            peg$reportedPos = s5;
                            s6 = peg$c21(s9);
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c22(s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseschool();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = [];
                s4 = peg$parsews();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsews();
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s4 = peg$c23;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parsews();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsews();
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsesubschool();
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parsews();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parsews();
                        }
                        if (s7 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s8 = peg$c25;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c26); }
                          }
                          if (s8 !== peg$FAILED) {
                            peg$reportedPos = s2;
                            s3 = peg$c27(s6);
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c28(s1, s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsesource();
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c29(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c23;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsews();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parsews();
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsefilter_token();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parsews();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parsews();
                        }
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c25;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c26); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c30(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequery_token() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c33.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c33.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c35(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c23;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsews();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsews();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsequery_token();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsews();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsews();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c25;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c36(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsews();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c5;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parsews();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c37(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsews() {
      var s0;

      if (peg$c38.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }

      return s0;
    }

    function peg$parseclass_() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c40) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c42) {
          s1 = input.substr(peg$currPos, 11);
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 20).toLowerCase() === peg$c44) {
            s1 = input.substr(peg$currPos, 20);
            peg$currPos += 20;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c46();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c49) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c51();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c52) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c54();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c55) {
              s1 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c57();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c58) {
                s1 = input.substr(peg$currPos, 11);
                peg$currPos += 11;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c60();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c61) {
                  s1 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c63) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c65) {
                      s1 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c66); }
                    }
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c67();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c68) {
                    s1 = input.substr(peg$currPos, 10);
                    peg$currPos += 10;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c69); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c70();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c71) {
                      s1 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c73();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c74) {
                        s1 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c75); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c76();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c77) {
                          s1 = input.substr(peg$currPos, 8);
                          peg$currPos += 8;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c79) {
                            s1 = input.substr(peg$currPos, 8);
                            peg$currPos += 8;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c80); }
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c81();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c82) {
                            s1 = input.substr(peg$currPos, 10);
                            peg$currPos += 10;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c83); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c84) {
                              s1 = input.substr(peg$currPos, 11);
                              peg$currPos += 11;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c85); }
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c86();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c87) {
                              s1 = input.substr(peg$currPos, 11);
                              peg$currPos += 11;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c88); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c89();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                                s1 = input.substr(peg$currPos, 6);
                                peg$currPos += 6;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c91); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c92();
                              }
                              s0 = s1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselevel_tokens() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseclass_();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsews();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsews();
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c93.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c94); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c93.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c95(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsews();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsews();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c93.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c94); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c93.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c94); }
                }
              }
            } else {
              s5 = peg$c0;
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c95(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c96(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecomponents() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c97) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c99) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c100); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c101();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c102) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c104) {
            s1 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c106();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c107) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c108); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c109();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c110) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c111); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c112();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c113) {
                s1 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c115) {
                  s2 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c116); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parsews();
                  if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parsews();
                    }
                  } else {
                    s3 = peg$c0;
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c117) {
                      s4 = input.substr(peg$currPos, 5);
                      peg$currPos += 5;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c118); }
                    }
                    if (s4 !== peg$FAILED) {
                      s2 = [s2, s3, s4];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c119();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c120) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c115) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c122();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 1).toLowerCase() === peg$c123) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c124); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c125) {
                      s1 = input.substr(peg$currPos, 10);
                      peg$currPos += 10;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c126); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c127) {
                        s1 = input.substr(peg$currPos, 10);
                        peg$currPos += 10;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c128); }
                      }
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c129();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseregister() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c130) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c132();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c135();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c136) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c137); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c138();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c139) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c141();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c142) {
                s2 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c143); }
              }
              if (s2 !== peg$FAILED) {
                if (peg$c144.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                }
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c146) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c147); }
                }
                if (s2 !== peg$FAILED) {
                  if (peg$c144.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c145); }
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c148) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c149); }
                    }
                    if (s4 !== peg$FAILED) {
                      if (peg$c150.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c151); }
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c152) {
                          s6 = input.substr(peg$currPos, 3);
                          peg$currPos += 3;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c153); }
                        }
                        if (s6 !== peg$FAILED) {
                          s2 = [s2, s3, s4, s5, s6];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              }
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c11) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c154();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c155) {
                  s1 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c156); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c157();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c158) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c159); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c160();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (peg$c144.test(input.charAt(peg$currPos))) {
                      s1 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c145); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c161) {
                        s2 = input.substr(peg$currPos, 9);
                        peg$currPos += 9;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c162); }
                      }
                      if (s2 !== peg$FAILED) {
                        if (peg$c163.test(input.charAt(peg$currPos))) {
                          s3 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c164); }
                        }
                        if (s3 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c165) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c166); }
                          }
                          if (s4 === peg$FAILED) {
                            s4 = peg$c1;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c167();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c168) {
                        s1 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c169); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c170();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c171) {
                          s1 = input.substr(peg$currPos, 4);
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c172); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c173) {
                            s1 = input.substr(peg$currPos, 7);
                            peg$currPos += 7;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c174); }
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c175();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c176) {
                            s1 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c177); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c178();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c179) {
                              s1 = input.substr(peg$currPos, 5);
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c180); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c181();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c182) {
                                s1 = input.substr(peg$currPos, 4);
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c183); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c184();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c185) {
                                  s1 = input.substr(peg$currPos, 7);
                                  peg$currPos += 7;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c186); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c187();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c188) {
                                    s1 = input.substr(peg$currPos, 3);
                                    peg$currPos += 3;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c189); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c190();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c191) {
                                      s1 = input.substr(peg$currPos, 4);
                                      peg$currPos += 4;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      if (peg$c150.test(input.charAt(peg$currPos))) {
                                        s2 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c151); }
                                      }
                                      if (s2 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c193) {
                                          s3 = input.substr(peg$currPos, 2);
                                          peg$currPos += 2;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c194); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c195();
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c196) {
                                        s1 = input.substr(peg$currPos, 6);
                                        peg$currPos += 6;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c198();
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c199) {
                                          s1 = input.substr(peg$currPos, 5);
                                          peg$currPos += 5;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c201();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c202) {
                                            s1 = input.substr(peg$currPos, 3);
                                            peg$currPos += 3;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c203); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c204();
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c205) {
                                              s1 = input.substr(peg$currPos, 3);
                                              peg$currPos += 3;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c206); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c207();
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c168) {
                                                s1 = input.substr(peg$currPos, 3);
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c169); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                if (peg$c144.test(input.charAt(peg$currPos))) {
                                                  s2 = input.charAt(peg$currPos);
                                                  peg$currPos++;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c208) {
                                                    s3 = input.substr(peg$currPos, 7);
                                                    peg$currPos += 7;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                                  }
                                                  if (s3 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c210();
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c211) {
                                                  s1 = input.substr(peg$currPos, 7);
                                                  peg$currPos += 7;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c212); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  peg$reportedPos = s0;
                                                  s1 = peg$c213();
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (peg$c144.test(input.charAt(peg$currPos))) {
                                                    s1 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c214) {
                                                      s2 = input.substr(peg$currPos, 6);
                                                      peg$currPos += 6;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c215); }
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                      peg$reportedPos = s0;
                                                      s1 = peg$c216();
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c217) {
                                                      s1 = input.substr(peg$currPos, 7);
                                                      peg$currPos += 7;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c218); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      peg$reportedPos = s0;
                                                      s1 = peg$c219();
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c220) {
                                                        s1 = input.substr(peg$currPos, 6);
                                                        peg$currPos += 6;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c222();
                                                      }
                                                      s0 = s1;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseschool() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c223) {
        s1 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c224); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c225();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c226) {
          s1 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c227); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c228) {
            s1 = input.substr(peg$currPos, 11);
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c229); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c230();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c231) {
            s1 = input.substr(peg$currPos, 10);
            peg$currPos += 10;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c232); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c233();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c234) {
              s1 = input.substr(peg$currPos, 12);
              peg$currPos += 12;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c235); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c236();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (peg$c237.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c238); }
              }
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c239) {
                  s2 = input.substr(peg$currPos, 8);
                  peg$currPos += 8;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c240); }
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c241();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c242) {
                  s1 = input.substr(peg$currPos, 8);
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c243); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c244();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 1).toLowerCase() === peg$c148) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c245); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (peg$c144.test(input.charAt(peg$currPos))) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c145); }
                    }
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c246) {
                        s3 = input.substr(peg$currPos, 9);
                        peg$currPos += 9;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c247); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c248();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c249) {
                      s1 = input.substr(peg$currPos, 13);
                      peg$currPos += 13;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c250); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c251();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c252) {
                        s1 = input.substr(peg$currPos, 11);
                        peg$currPos += 11;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c253); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c254();
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesubschool() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c255) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c256); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c257();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c258) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c259); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c144.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c260) {
              s3 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c261); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c262();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c263) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c264); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c144.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c145); }
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c265) {
                s3 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c266); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c267();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c268) {
              s1 = input.substr(peg$currPos, 11);
              peg$currPos += 11;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c269); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c270();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c146) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c271); }
              }
              if (s1 !== peg$FAILED) {
                if (peg$c144.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                }
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 1).toLowerCase() === peg$c272) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c273); }
                  }
                  if (s3 !== peg$FAILED) {
                    if (peg$c144.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c145); }
                    }
                    if (s4 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c274) {
                        s5 = input.substr(peg$currPos, 9);
                        peg$currPos += 9;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c275); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c276();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c277) {
                  s1 = input.substr(peg$currPos, 10);
                  peg$currPos += 10;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c278); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c279();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c280) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c281); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c282();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c283) {
                      s1 = input.substr(peg$currPos, 10);
                      peg$currPos += 10;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c284); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c285) {
                        s1 = input.substr(peg$currPos, 10);
                        peg$currPos += 10;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c286); }
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c287();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c288) {
                        s1 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c289); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (peg$c150.test(input.charAt(peg$currPos))) {
                          s2 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c151); }
                        }
                        if (s2 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c193) {
                            s3 = input.substr(peg$currPos, 2);
                            peg$currPos += 2;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c194); }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c290();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c291) {
                          s1 = input.substr(peg$currPos, 13);
                          peg$currPos += 13;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c292); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c293();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c294) {
                            s1 = input.substr(peg$currPos, 6);
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c295); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c296();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c199) {
                              s1 = input.substr(peg$currPos, 5);
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c297); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c201();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c123) {
                                s1 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c124); }
                              }
                              if (s1 !== peg$FAILED) {
                                if (peg$c144.test(input.charAt(peg$currPos))) {
                                  s2 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                }
                                if (s2 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c298) {
                                    s3 = input.substr(peg$currPos, 10);
                                    peg$currPos += 10;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c299); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c300();
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesource() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c301) {
        s0 = peg$c301;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c303) {
          s0 = peg$c303;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c305) {
            s0 = peg$c305;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c306); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c307) {
              s0 = peg$c307;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c308); }
            }
          }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
